/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var winterIslandPolygon = /* color: #d63000 */ee.Geometry.Polygon(
        [[[-121.85718298752852, 38.047159797045666],
          [-121.8510031779582, 38.042698589913],
          [-121.84971571763106, 38.0374259037627],
          [-121.84465170701094, 38.03769630715944],
          [-121.84808493455, 38.048849577248006]]]),
    focusArea = 
    /* color: #98ff00 */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[-122.86357421875, 38.809492348693325],
          [-122.86357421875, 36.79582392570054],
          [-120.7322265625, 36.79582392570054],
          [-120.7322265625, 38.809492348693325]]], null, false);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// ## Initial Imports and Global Variables ###
var classifiedMaps = {
  "fall2019": ee.Image('users/eorsgee/Classified_Fall2019'),
  "spring2019": ee.Image('users/eorsgee/Classified_Spring2019'),
  "fall2018": ee.Image('users/eorsgee/C26hybrid_20181007_Class5H_wwcropy')
};

var globalClassMap = null;

// Import external scripts
var IndicesFunc = require('users/eorsgee/DSC-Delta-Task2:IndexFunctions');

// Import baseline ImageCollection
var primaryImageCollection = ee.ImageCollection('COPERNICUS/S2_SR');

// Use the start of the collection and now to bound the slider.
var globalStart = ee.Image(primaryImageCollection.first()).date().get('year').format();
var globalNow = Date.now();
var globalEnd = ee.Date(globalNow).format();

// ### Initial Script Preferences ###
// Note: Some of these are modified by UI widgets!
var prefs = {
  "tile": '10SFH',
  "ccLimit": 20,
  "index_nir": "B8",
  "index_red": "B4",
  "index_green": "B3",
  "index_blue": "B2",
  "preview_red": "TCI_R",
  "preview_green": "TCI_G",
  "preview_blue": "TCI_B",
  "l_correction_factor": 0.5,
  "date_range": ee.DateRange(globalStart, globalEnd)
}

var sites = {
  'winterIsland': {
    'name': 'Winter Island',
    'location': ee.Geometry.Point([-121.84910943096135, 38.043111416848646]),
    'geometry': winterIslandPolygon,
    'zoom': 14
  }
}
var globalSite = null;

// ### Create UI Layout ###
var mainPanel = ui.Panel({
  layout: ui.Panel.Layout.flow('vertical'),
  style: {width: '300px'}
});

// Cloud Filter Items
var cloudFilterPanel = ui.Panel({
  layout: ui.Panel.Layout.flow('vertical')
});
mainPanel.add(cloudFilterPanel);

var cloudFilterLabel = ui.Label('Cloud Cover Filter (%)');
cloudFilterLabel.style().set({fontSize: '20px'});
cloudFilterPanel.add(cloudFilterLabel);

var cloudFilterSlider = ui.Slider(0, 100, prefs.ccLimit, 1, function(value) {
  prefs.ccLimit = value;
});
cloudFilterSlider.style().set({stretch: 'horizontal'});
cloudFilterPanel.add(cloudFilterSlider);

// Date Filter Items
var datesSelectorPanel = ui.Panel({
  layout: ui.Panel.Layout.flow('vertical')
});
mainPanel.add(datesSelectorPanel);
var dateSelectorLabel = ui.Label('Date Filter Selector');
dateSelectorLabel.style().set({fontSize: '20px'});
datesSelectorPanel.add(dateSelectorLabel);

var startDatePanel = ui.Panel({
  layout: ui.Panel.Layout.flow('horizontal')
});
datesSelectorPanel.add(startDatePanel);
startDatePanel.add(ui.Label('Start Date: '));

var endDatePanel = ui.Panel({
  layout: ui.Panel.Layout.flow('horizontal')
});
datesSelectorPanel.add(endDatePanel);
endDatePanel.add(ui.Label('End Date: '));

var classificationPanel = ui.Panel({
  layout: ui.Panel.Layout.flow('vertical')
});
mainPanel.add(classificationPanel);
var classificationLabel = ui.Label('Classification Maps');
classificationLabel.style().set({fontSize: '20px'});
classificationPanel.add(classificationLabel);

var classificationSelect = ui.Select({
  items: Object.keys(classifiedMaps),
  onChange: function(key) {
    // Change the global classification map
    globalClassMap = classifiedMaps[key];
    print("[DEBUG] Class map changed: ", globalClassMap);
  },
  placeholder: 'Choose a classification map...'
});
classificationPanel.add(classificationSelect);

var siteSelectorPanel = ui.Panel({
  layout: ui.Panel.Layout.flow('vertical')
});
mainPanel.add(siteSelectorPanel);
var siteSelectorLabel = ui.Label('Site Selection');
siteSelectorLabel.style().set({fontSize: '20px'});
siteSelectorPanel.add(siteSelectorLabel);

var siteSelectorDropdown = ui.Select({
  items: Object.keys(sites),
  onChange: function(key) {
    // Update global selected site variable
    globalSite = sites[key];
    
    // Move and zoom preview map
    var location = globalSite.location.coordinates();
    var zoom = globalSite.zoom;
    Map.setCenter(ee.Number(location.get(0)).getInfo(), ee.Number(location.get(1)).getInfo(), zoom);
  },
  placeholder: "Choose a site..."
});
siteSelectorPanel.add(siteSelectorDropdown);

var runPanel = ui.Panel({
  layout: ui.Panel.Layout.flow('vertical')
});
mainPanel.add(runPanel);

var runPanelLabel = ui.Label('Processing');
runPanelLabel.style().set({fontSize: '20px'});
runPanel.add(runPanelLabel);

var runProcessingButton = ui.Button({
  label: 'Run Processing',
  onClick: function() {
    runProcessing();
  }
});
runPanel.add(runProcessingButton);

// ### Create Date Selector Widgets ###

// Run this function on a change of the dateSlider.
var showMosaic = function(range) {
  
  // Re-run filters, etc.
  primaryImageCollection = ee.ImageCollection('COPERNICUS/S2_SR')
                            .filterBounds(focusArea)
                            .filter(ee.Filter.date(range.start(), range.end()))
                            .filter(ee.Filter.lte('CLOUDY_PIXEL_PERCENTAGE', prefs.ccLimit));
                            
  print(primaryImageCollection)
  
  // Compute Mosaic
  var mosaic = primaryImageCollection.mosaic();
  
  // Display Preview Layer
  var visParams = {bands: [prefs.preview_red, prefs.preview_green, prefs.preview_blue], max: 256};
  var layer = ui.Map.Layer(mosaic, visParams, 'TCI Preview');
  Map.layers().set(0, layer);
};

var changeStart = function(range) {
  prefs.date_range = ee.DateRange(range.start(), prefs.date_range.end());
  
  showMosaic(prefs.date_range);
  
  print(prefs.date_range);
}

var changeEnd = function(range) {
  prefs.date_range = ee.DateRange(prefs.date_range.start(), range.end());
  
  showMosaic(prefs.date_range);
  
  print(prefs.date_range);
}

// Asynchronously compute the date range and show the slider.
var startDateRange = prefs.date_range.evaluate(function(range) {
  var startDateSlider = ui.DateSlider({
    start: range['dates'][0],
    end: range['dates'][1],
    value: null,
    period: 1,
    style: {stretch: 'horizontal'},
    onChange: changeStart
  });
  startDatePanel.add(startDateSlider.setValue(range['dates'][0]));
});

var endDateRange = prefs.date_range.evaluate(function(range) {
  var endDateSlider = ui.DateSlider({
    start: range['dates'][0],
    end: range['dates'][1],
    value: null,
    period: 1,
    style: {stretch: 'horizontal'},
    onChange: changeEnd
  });
  endDatePanel.add(endDateSlider.setValue(globalNow));
});

// ### Configure and Add UI ###
// ui.root.clear();
ui.root.add(mainPanel);

// ### Run Processing ###
var runProcessing = function() {
  
  // Mask Clouds
  var cloudMasked = primaryImageCollection.map(IndicesFunc.maskS2clouds);
  
  // [DEBUG] Print cloudMasked ImageCollection
  print("Cloud Masked ImageCollection:");
  print(cloudMasked);
  
  // Calculate Indices
  var indexOutputs = cloudMasked.map(IndicesFunc.applyNDVI).map(IndicesFunc.applyNDAVI).map(IndicesFunc.applyWAVI).select(["NDVI", "NDAVI", "WAVI"]);
  
  // [DEBUG] Print output of calculations
  print("Calculated Index Outputs:");
  print(indexOutputs);
  
  // Create a color table for the charts & visualization
  var color_table = {
    0: {color: "1abc9c"},
    1: {color: "e74c3c"},
    2: {color: "3498db"},
    3: {color: "9b59b6"},
    4: {color: "34495e"},
    5: {color: "f1c40f"},
    6: {color: "e67e22"},
    7: {color: "2ecc71"}
  }
  
  // Reduce and Plot
  // Test Chart for "by index" charts
  var testChart = ui.Chart.image.series({
    imageCollection: indexOutputs,
    region: globalSite.geometry,
    reducer: ee.Reducer.mean(),
    xProperty: 'system:time_start'
  })
  
  testChart.setChartType('ScatterChart')
  testChart.setOptions({
    title: '[TESTING] Index Calculation Outputs',
    vAxis: {
      title: 'Index Value'
    },
    hAxis: {
      title: "Time"
    },
    lineWidth: 1,
    pointSize: 3,
    series: color_table
  })
  print(testChart)
  
  // Compute Preview Mosaic
  var mosaic = indexOutputs.mosaic();
  
  // Display Preview Layer
  var visParams = {bands: ["NDVI", "NDAVI", "WAVI"], max: 1, min: -1};
  var layer = ui.Map.Layer(mosaic, visParams, 'Index Preview');
  Map.layers().set(1, layer);
}